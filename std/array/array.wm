// Copyright (c) 2025 muuuuuu_02

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE. 

class IntArray(_cap:int){
    var _data:str;
    var _size:int;
    init{
        _data = _builtin_malloc(_cap * 4);
        _size = 0;
    }

    fn insert(element:int){
        if(_size == _cap){
            print_str("\nError: call IntArray.insert(element), current array's size >= capacity.\n");
            return;
        }
        _builtin_int_array_insert_impl(self, element);
        _size = _size + 1;
        return ;
    }

    fn at(index:int) -> int{
        if(index >= _cap){
            print_str("\nError: call IntArray.at(index), index >= capacity.\n");
            return -1;
        }
        return _builtin_int_array_at_impl(self, index);
    }

    fn front() -> int{
        return self.at(0);
    }

    fn back() -> int{
        return self.at(_size - 1);
    }

    fn empty() -> bool{
        return _size == 1;
    }

    fn size() -> int{
        return _cap;
    }

    fn fill(element:int){
        for(i in Range(_cap)){
            self.insert(element);
        }
        return;
    }
}

// class StringArray()